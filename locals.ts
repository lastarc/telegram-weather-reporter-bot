import { CurrentWeatherAPIResponse, ForecastWeatherAPIResponse } from './bot.ts';

interface LocaleString {
    [lang: string]: string | Function;
}
interface LocaleStringList {
    [key: string]: LocaleString;
}
interface TemplateData {
    [key: string]: any;
}

const d2c = (s: number | string) => s.toString().replace('.', ',');

const windDirectionEmoji = (dir: string) => {
    dir = dir.toUpperCase();
    if (dir.length === 3) {
        dir = [...new Set(dir.split(''))].join('');
    }
    if (dir[0] === 'E' || dir[0] === 'W') {
        dir = dir.split('').reverse().join('');
    }
    switch (dir) {
        case 'N':
            return '‚¨ÜÔ∏è'
        case 'E':
            return '‚û°Ô∏è'
        case 'S':
            return '‚¨áÔ∏è'
        case 'W':
            return '‚¨ÖÔ∏è'
        case 'NE':
            return '‚ÜóÔ∏è'
        case 'SE':
            return '‚ÜòÔ∏è'
        case 'SW':
            return '‚ÜôÔ∏è'
        case 'NW':
            return '‚ÜñÔ∏è'
    }
};

const strings: LocaleStringList = {
    welcome: {
        en: 'Hi! Thank you for using our bot üôÇ \n' +
            'For help: /help',
        ru: '–ü—Ä–∏–≤–µ—Ç! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üôÇ \n' +
            '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help',
    },
    welcomeBack: {
        en: 'Welcome back! \n' +
            'For help: /help',
        ru: '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n' +
            '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help',
    },
    alreadyUser: {
        en: 'You are already a user! \n' +
            'For help: /help',
        ru: '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n' +
            '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help',
    },
    notFoundInDatabase: {
        en: 'We couldn\'t find you in our database! Try "/start"ing over.',
        ru: '–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: "/start"',
    },
    noLocationIndicated: {
        en: 'No location indicated!',
        ru: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ!',
    },
    noTimeIndicated: {
        en: 'No time indicated!',
        ru: '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ!',
    },
    noLanguageIndicated: {
        en: 'No language indicated!',
        ru: '–Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω!',
    },
    noLocationSetByUser: {
        en: 'You haven\'t set your location yet. \n' +
            'For help: /help',
        ru: '–í—ã –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n' +
            '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help',
    },
    noLocationIndicatedAndNoDefault: {
        en: 'You have neither indicated a location nor have a default location tied to your profile!',
        ru: '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é!',
    },
    unidentifiedOffset: {
        en: 'Unidentified offset',
        ru: '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ',
    },
    languageNotRecognized: {
        en (languages: Array<string>) {
            return `Language not recognized. Possible options: ${languages.join(', ')}.`
        },
        ru (languages: Array<string>) {
            return `–Ø–∑—ã–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ${languages.join(', ')}.`
        },
    },
    locationSet: {
        en: 'Your location is set as "{user.location}", ' +
            'which is recognized as "{response.location.name}, ' +
            '{response.location.region}, {response.location.country}".',
        ru: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ "{user.location}", ' +
            '–∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ "{response.location.name}, ' +
            '{response.location.region}, {response.location.country}".',
    },
    timeSet: {
        en: 'Your time is set as "{time} GMT{offset}", ' +
            'which is also "{hours}:{minutes} GMT".',
        ru: '–í–∞—à–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ "{time} GMT{offset}", ' +
            '—á—Ç–æ —Ç–∞–∫–∂–µ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ "{hours}:{minutes} GMT".',
    },
    languageSet: {
        en: 'Your language is set as "{lang}"',
        ru: '–í–∞—à —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ "{lang}"',
    },
    help: {
        en: 'This bot will send you a daily weather forecast of the location at the given time. ' +
            'Both location and time must be set by you beforehand. \n\n' +
            'How to use this bot: \n' +
            '1. If you haven\'t already sent the command "/start", now it\'s the best time for it. \n' +
            '2. Set your location by typing "/location CITY", ' +
            'where instead of "CITY", you should put your city name. \n' +
            '3. Set your time for receiving a daily report by sending "/time TIME", ' +
            'where "TIME" must be in the format "23:59" (24-hour format). ' +
            'Time must be given in your location\'s timezone; ' +
            'that\'s why setting the location before this step is important. \n' +
            '4. There are no steps left. Rest will be handled by the bot itself üòâ \n\n' +
            'Relax üçπ',
        ru: '–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø—Ä–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è. ' +
            '–ò –º–µ—Å—Ç–æ, –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ. \n\n' +
            '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞: \n' +
            '1. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É "/start", —Å–µ–π—á–∞—Å ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è. \n' +
            '2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "/location CITY", ' +
            '–≥–¥–µ –≤–º–µ—Å—Ç–æ "CITY" –≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞. \n' +
            '3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ "/time TIME", ' +
            '–≥–¥–µ "TIME" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "23:59" (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç). ' +
            '–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è; ' +
            '–≤–æ—Ç –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —à–∞–≥–æ–º. \n' +
            '4. –®–∞–≥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –û—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∞–º–∏–º –±–æ—Ç–æ–º üòâ \n\n' +
            '–†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å üçπ',
    },
    dailyForecast: {
        en (data: ForecastWeatherAPIResponse['forecast']['forecastday'][0]['day']) {
            return `üå° ${data.maxtemp_c}-${data.mintemp_c}ÀöC, ` +
                `üí® ${data.maxwind_kph} km/s, ` +
                `‚òîÔ∏è ${data.daily_chance_of_rain}% \n` +
                `Humidity: ${data.avghumidity}% \n`;
        },
        ru (data: ForecastWeatherAPIResponse['forecast']['forecastday'][0]['day']) {
            return `üå° ${d2c(data.maxtemp_c)}-${d2c(data.mintemp_c)}ÀöC, ` +
                `üí® ${d2c(data.maxwind_kph)} –∫–º/—á, ` +
                `‚òîÔ∏è ${d2c(data.daily_chance_of_rain)}% \n` +
                `–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${d2c(data.avghumidity)}%`;
        },
    },
    current: {
        en (data: CurrentWeatherAPIResponse['current']) {
            return `üå° ${data.temp_c}ÀöC (üßë ${data.feelslike_c}ÀöC), ` +
                `üíß ${data.precip_mm} mm \n` +
                `üí® ${data.wind_kph} km/s (üöÄ ${data.gust_kph} km/s) ${windDirectionEmoji(data.wind_dir)}, ` +
                `‚òÅÔ∏è ${data.cloud}% \n` +
                `Humidity: ${data.humidity}%`;
        },
        ru (data: CurrentWeatherAPIResponse['current']) {
            return `üå° ${d2c(data.temp_c)}ÀöC (üßë ${d2c(data.feelslike_c)}ÀöC), ` +
                `üíß ${d2c(data.precip_mm)} –º–º \n` +
                `üí® ${d2c(data.wind_kph)} –∫–º/—á (üöÄ ${d2c(data.gust_kph)} –∫–º/—á) ${windDirectionEmoji(data.wind_dir)}, ` +
                `‚òÅÔ∏è ${d2c(data.cloud)}% \n` +
                `–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${d2c(data.humidity)}%`;
        },
    },
    info: {
        en: 'Location: {location} \n' +
            'Time: {time}',
        ru: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location} \n' +
            '–í—Ä–µ–º—è: {time}',
    },
}
const fallbackLang = 'en';
const deepValue = (obj: any, path: string) => {
    for (let i = 0, p = path.split('.'), len = p.length; i <  len; i++){
        obj = obj[p[i]];
    }
    return obj;
};

export function locale (key: any, lang: string | null | any, data?: TemplateData): string {
    if (strings.hasOwnProperty(key)) {
        const item = strings[key][lang || fallbackLang];
        return (typeof item === "string") ? item.replace(
            /{((\w*\.*)*)}/g,
            ( match: string, prop: any ) => {
                return deepValue(data, prop) || '';
            }
        ) : item(data);
    }
    return '';
}

export {deepValue, strings}